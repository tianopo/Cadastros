material UI
menuLateral.tsx

<Drawer variant='permanent'> = sempre está aberto
<Drawer variant='persistent'> = algo mais dinamico, expande o menu
<Drawer variant='temporary'> = menu fica sobre as coisas
<Box> = funciona como uma div

breakpoints = tamanhos definidos de tela, ajuda na responsividade
 ex: sm, small: 600px --- md, medium: 900px
const theme = useTheme()

useMediaQuery('min-width:600px')||useMediaQuery('theme.breakpoints.up('sm'));
theme.breakpoints.down('sm') = tiver menos que sm, retorna true
theme.breakpoints.keys('sm') = todos os breakpoints disponiveis
theme.breakpoints.not('sm') = se não for sm, retorna true
theme.breakpoints.only('sm') = retorna true se for sm
theme.breakpoints.up('sm') = retorna true se for maior que sm
theme.breakpoints.value('sm') = retorna os valores, agora retorna 600
theme.breakpoints.between('sm', 'md') = retorna true quando estiver entre

useNavigate() = react router dom, navega para outras páginas
useCallback() = faz a aplicação todas ser renderizada

onClick?.() = se a função for true, ela é executada
const resolvedPath = useResolvedPath(to) = 
 configuração de rota do menu lateral do react-router-dom
const match = useMatch({ path: resolvedPath.pathname, end: false}) =
 configura a ida para a rota;
selected={} = coloca seleção no menu

routes/index.tsx

useEffect = garante ser executado só uma vez após a re-renderização
usado para ação de clique, fetchs.

./layout
gap={1} -> distancia do material UI de 1x4px
typography = configura diferentes tipos de textos
whiteSpace="nowrap" -> não quebra novas linhas
textOverflow="ellipsis" -> aparece ... se o texto tiver muito grande
Overflow="hidden" = impede que apareça barra de scroll

/.BarraDeferramentas
Box pode assumir as propriedades do Paper, paper também aponta p/ o Box
const theme = useTheme();
<Box height={theme.spacing(4)} = define os espaços em valores de acordo
com o tema escolhido

(e) => aoMudarTextoDeBusca?.(e.target.value) = se a função da undefined,
coloque ?. para impor a condição 'apenas se não for undefined'

então uma interface eu crio os componentes, o export const BarraDeFerra
mentas: React.FC<IBarraDeFerramentas> pega seus valores como uma função
e depois coloca no return

./ferramentasDeDetalhe

skeleton = usado para fornecer uma representação visual enquanto estão
sendo carregados em forma geométrica. EX: facebook carregando

para botões fazer uma interface booleana de visibilidade de cada botão e
o clique de evento

dropDown == splitButton

json-server = cria arquivo JSON com registros e transforma em uma API
devDependencies = sempre que instalar o pacote já instala as dependencias
do JSON server e não vai para a produção quando faz o build
-w = é o watch, sempre roda
-p 3333 = é a porta padrão

axios
 a url base(antes do '/'), sempre se repete nas requisições
 configurações padrões de header, https, autenticação

interceptor = se deu erro(401), redireciona para uma página, uma função

/** */ = comentário para documentar o código
defina um nome para o contexto de uso.

environment= Colocar valores que se repetem muito em diferentes partes
do código

services= faz a consulta do backend

const { data } = await Api.get('/pessoas?_page=1&_limit=10'); =
 faz com que a página apareça 10 registros

operators = simula uma consulta no banco de dados SQL como um titulo
 ex: GET /posts?title_like=server

slice = toda listagem traz uma quantidade total de registros no banco
de dados

métodos HTTP:
 get = obtém os dados
 post = consegue enviar dados para o backend
 put = atualiza os dados
 delete = exclui os dados

useSearchParams() = hook do react-router-dom para pesquisa no input

searchParams.get('busca') ?? ''
?? = caso venha null, colocar a string vazia